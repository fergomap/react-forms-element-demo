{"version":3,"sources":["components/header/header.component.tsx","components/example/example.component.tsx","components/simple-form/simple-form.component.tsx","components/validations-form/validations-form.component.tsx","components/file-form/file-form.component.tsx","components/date-form/date-form.component.tsx","components/select-checkbox-form/select-checkbox-form.component.tsx","components/list-form/list-form.component.tsx","config/app.config.tsx","components/simple-form/simple-form-code.tsx","components/validations-form/validations-form-code.tsx","components/file-form/file-form-code.tsx","components/date-form/date-form-code.tsx","components/select-checkbox-form/select-checkbox-code.tsx","components/list-form/list-form-code.tsx","App.tsx","index.tsx"],"names":["HeaderComponent","className","ExampleComponent","code","component","subtitle","title","useState","showCode","setShowCode","onClick","language","style","dark","showLineNumbers","SimpleFormComponent","fields","value","label","name","type","required","onChange","console","log","onBlur","inputType","options","placeholder","multipleSelected","onSubmit","form","nameValidation","length","customErrors","short_name","server_error","ValidationsFormComponent","loading","setLoading","customValidator","email","Promise","resolve","timeout","setTimeout","clearTimeout","position","generalError","errors","submitButtonText","FileFormComponent","fileType","multipleFiles","DateFormComponent","minDate","Date","maxDate","setMonth","getMonth","content","mobileCalendar","calendarLocale","es","SelectCheckboxFormComponent","submitList","values","city","undefined","formatDate","date","toDateString","ListFormComponent","showInList","listLabel","APP_CONSTANTS","EXAMPLES","App","src","process","alt","map","props","index","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a8ffc4a5.chunk.js","sourcesContent":["import React, { FunctionComponent, ReactElement } from 'react';\nimport './header.component.scss';\n\nconst HeaderComponent: FunctionComponent = (): ReactElement => {\n    return <div className=\"header-component\">\n        <span>React Forms Element</span>\n    </div>;\n};\n\nexport default HeaderComponent;\n","import React, { FunctionComponent, ReactElement, useState } from 'react';\nimport './example.component.scss';\nimport { Prism } from 'react-syntax-highlighter';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nexport interface ExampleComponentProps {\n    title: string;\n    subtitle: string;\n    component: ReactElement;\n    code: string;\n}\n\nconst ExampleComponent: FunctionComponent<ExampleComponentProps> = ({ code, component, subtitle, title }): ReactElement => {\n    const [ showCode, setShowCode ] = useState(false);\n\n    return <div className=\"example-component container\">\n        <div className=\"row\">\n            <div className=\"col-sm-12\">\n                <h4>{ title }</h4>\n                <p>{ subtitle }</p>\n            </div>\n            <div className=\"col-sm-12 sections\">\n                <button className={!showCode ? 'selected' : ''} onClick={() => setShowCode(false)}>FORM</button>\n                <button className={showCode ? 'selected' : ''} onClick={() => setShowCode(true)}>CODE</button>\n            </div>\n        </div>\n        { showCode ? <Prism language=\"typescript\" style={dark} showLineNumbers={true}>\n            { code }\n        </Prism> : component }\n    </div>;\n};\n\nexport default ExampleComponent;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\n\nconst SimpleFormComponent: FunctionComponent = (): ReactElement => {\n  const fields: Field[] = [\n    { value: '', className: 'col-sm-12 col-md-3', label: 'Name', name: 'name', type: 'string', required: true, onChange: (name: string) => console.log('Name changed: ' + name), onBlur: (name: string) => console.log('Name blur: ' + name) },\n    { value: '', className: 'col-sm-12 col-md-3', label: 'Email', name: 'email', type: 'email', required: true },\n    { value: '', className: 'col-sm-12 col-md-3', label: 'Age', name: 'age', required: true, inputType: 'number', type: 'number' },\n    { value: '', className: 'col-sm-12 col-md-3', label: 'Password', name: 'pwd', required: true, inputType: 'password' },\n    { value: '', className: 'col-sm-12 col-md-8', label: 'Description', name: 'description', type: 'textarea' },\n    { value: '', className: 'col-sm-12 col-md-4', label: 'Curriculum Vitae', name: 'cv', type: 'file', required: true },\n    { value: '', className: 'col-sm-12', label: 'Business', name: 'business', type: 'checkbox', required: true },\n    { value: '', className: 'col-sm-12 col-md-4', label: 'Birthday', name: 'birthday', type: 'date', required: true },\n    { value: '', className: 'col-sm-12 col-md-4', label: 'Where do you live?', name: 'continent', type: 'select', options: [{label: 'Africa', value: 'af'}, {label: 'America', value: 'am'}, {label: 'Asia', value: 'as'}, {label: 'Europe', value: 'eu'}, {label: 'Oceania', value: 'oc'}] },\n    { value: '', className: 'col-sm-12 col-md-4', label: 'Where would you like to live?', name: 'desiredContinent', type: 'select', placeholder: 'Select the ones you like', options: [{label: 'Africa', value: 'af'}, {label: 'America', value: 'am'}, {label: 'Asia', value: 'as'}, {label: 'Europe', value: 'eu'}, {label: 'Oceania', value: 'oc'}], multipleSelected: true },\n    { value: '', className: 'col-sm-12 col-md-6', label: 'Which is your favourite color?', name: 'colors', type: 'checkbox-list', options: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}, {label: 'Blue', value: 'blue'}, {label: 'Yellow', value: 'yellow'}] },\n    { value: '', className: 'col-sm-12 col-md-6', label: 'What programming languages do you know?', name: 'languages', type: 'checkbox-list', options: [{label: 'JavaScript', value: 'js'}, {label: 'TypeScript', value: 'ts'}, {label: 'JAVA', value: 'java'}, {label: 'Python', value: 'py'}], multipleSelected: true },\n  ];\n\n  const onSubmit = (form: Record<string, any>): void => console.log(form);\n\n  return <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} />;\n};\n\nexport default SimpleFormComponent;\n","import React, { FunctionComponent, ReactElement, useState } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\nimport { SpinnerComponent } from 'react-element-spinner';\n\nconst nameValidation = (name: string): string => name.length > 3 ? '' : 'short_name';\n\nconst customErrors = {\n    short_name: 'Name is too short.',\n    server_error: 'Something went wrong, please try later.'\n}\n\nconst ValidationsFormComponent: FunctionComponent = (): ReactElement => {\n    const [ loading, setLoading ] = useState(false);\n\n    const asyncValidation = (email: string): Promise<string> => {\n        setLoading(true);\n\n        return new Promise(resolve => {\n            const timeout = setTimeout(() => {\n                clearTimeout(timeout);\n                resolve(email === 'email@gmail.com' ? 'This mail is already registered' : '');\n                setLoading(false);\n            }, 2000);\n        });\n    };\n\n    const fields: Field[] = [\n        { value: '', className: 'col-sm-12 col-md-3', label: 'Name', name: 'name', type: 'string', placeholder: 'Name', customValidator: nameValidation },\n        { value: 'default@gmail.com', className: 'col-sm-12 col-md-3', label: 'Email', name: 'email', type: 'email', customValidator: asyncValidation }\n    ];\n\n    const onSubmit = (form: Record<string, any>): Record<string, any> | void => {\n        return form.name === 'John' ? { generalError: 'server_error' } : console.log(form);\n    };\n\n    return <>\n        <SpinnerComponent position=\"global\" loading={loading} />\n        <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} errors={customErrors} submitButtonText=\"Submit\" />\n    </>;\n};\n\nexport default ValidationsFormComponent;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\n\nconst FileFormComponent: FunctionComponent = (): ReactElement => {\n  const fields: Field[] = [\n    { value: 'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf', className: 'col-sm-12 col-md-6', label: 'Single PDF File', name: 'pdf', type: 'file', fileType: 'application/pdf' },\n    { value: [], className: 'col-sm-12 col-md-6', label: 'Multiple image files', name: 'images', type: 'file', fileType: 'image/*', multipleFiles: true, placeholder: 'Only images allowed', required: true }\n  ];\n\n  const onSubmit = (form: Record<string, any>): void => console.log(form);\n\n  return <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} />;\n};\n\nexport default FileFormComponent;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\nimport es from 'date-fns/locale/es';\n\nconst DateFormComponent: FunctionComponent = (): ReactElement => {\n    const minDate = new Date();\n    const maxDate = new Date();\n    maxDate.setMonth(minDate.getMonth() + 1);\n\n    const fields: Field[] = [\n        { type: 'custom', content: <div className=\"col-sm-12\"><h4>Custom content as title for the form</h4></div> },\n        { value: '', className: 'col-sm-12 col-md-4', label: 'Date with max and min', name: 'maxMinDate', type: 'date', minDate, maxDate },\n        { value: '', className: 'col-sm-12 col-md-4', label: 'Date adapted to mobile', name: 'mobileDate', type: 'date', mobileCalendar: true },\n    ];\n\n    const onSubmit = (form: Record<string, any>): void => console.log(form);\n\n    return <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} calendarLocale={es} />;\n};\n\nexport default DateFormComponent;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\n\nconst SelectCheckboxFormComponent: FunctionComponent = (): ReactElement => {\n  const fields: Field[] = [\n    { value: true, className: 'col-sm-12', label: 'Business', name: 'business', type: 'checkbox', required: true },\n    { value: 'eu', className: 'col-sm-12 col-md-4', label: 'Where do you live?', name: 'continent', type: 'select', options: [{label: 'Africa', value: 'af'}, {label: 'America', value: 'am'}, {label: 'Asia', value: 'as'}, {label: 'Europe', value: 'eu'}, {label: 'Oceania', value: 'oc'}] },\n    { value: ['am', 'as'], className: 'col-sm-12 col-md-4', label: 'Where would you like to live?', name: 'desiredContinent', type: 'select', placeholder: 'Select the ones you like', options: [{label: 'Africa', value: 'af'}, {label: 'America', value: 'am'}, {label: 'Asia', value: 'as'}, {label: 'Europe', value: 'eu'}, {label: 'Oceania', value: 'oc'}], multipleSelected: true },\n    { value: 'red', className: 'col-sm-12 col-md-6', label: 'Which is your favourite color?', name: 'colors', type: 'checkbox-list', options: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}, {label: 'Blue', value: 'blue'}, {label: 'Yellow', value: 'yellow'}] },\n    { value: ['js', 'ts'], className: 'col-sm-12 col-md-6', label: 'What programming languages do you know?', name: 'languages', type: 'checkbox-list', options: [{label: 'JavaScript', value: 'js'}, {label: 'TypeScript', value: 'ts'}, {label: 'JAVA', value: 'java'}, {label: 'Python', value: 'py'}], multipleSelected: true }\n  ];\n\n  const onSubmit = (form: Record<string, any>): void => console.log(form);\n\n  return <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} />;\n};\n\nexport default SelectCheckboxFormComponent;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\n\nconst submitList = (values: any): Record<string, string> | void => {\n    return values.city.length > 3 ? undefined : { city: 'The city does not exist!' };\n};\n\nconst formatDate = (date: Date): string => date.toDateString();\n\nconst ListFormComponent: FunctionComponent = (): ReactElement => {\n  const fields: Field[] = [\n    { value: '', label: 'Name', name: 'name', type: 'string', className: 'col-sm-12 col-md-3' }, \n    { value: '', className: 'row no-margin', title: 'Which cities have you visited?', name: 'cities', type: 'list', required: true, onSubmit: submitList, fields: [ \n        { value: '', className: 'col-sm-12', label: 'City', name: 'city', type: 'string', required: true, showInList: true },\n        { value: '', className: 'col-sm-12', label: 'Country', name: 'country', type: 'string', required: true },\n        { value: '', className: 'col-sm-12', label: 'Did you like it?', listLabel: 'Liked', name: 'liked', type: 'checkbox', showInList: true },\n        { value: '', className: 'col-sm-12', label: 'When did you visit it?', listLabel: 'When', name: 'when', type: 'date', required: true, maxDate: new Date(), showInList: true },\n        { value: '', className: 'col-sm-12', label: 'When do you plan to visit it again? (other date format)', listLabel: 'Next visit', name: 'nextVisit', type: 'date', formatDate, minDate: new Date(), showInList: true },\n        { value: '', className: 'col-sm-12', label: 'Photos', name: 'photos', type: 'file', multipleFiles: true, showInList: true },\n        { value: '', className: 'col-sm-12', label: 'Score', showInList: true, required: true, placeholder: '- Select -', name: 'score', type: 'select', options: [{label: 'Bad', value: 'bad'}, {label: 'Good', value: 'good'}, {label: 'Excellent', value: 'excellent'}] },\n        { value: '', className: 'col-sm-12', label: 'Which kind of food did you eat?', listLabel: 'Food', multipleSelected: true, required: false, name: 'foods', showInList: true, type: 'checkbox-list', options: [{label: 'Pizza', value: 'pizza'}, {label: 'Hamburguer', value: 'hamburguer'}, {label: 'Sushi', value: 'sushi'}] },\n    ]}\n  ];\n\n  const onSubmit = (form: any): any => console.log(form);\n\n  return <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} />;\n};\n\nexport default ListFormComponent;\n","import React from 'react';\nimport { ExampleComponentProps } from '../components/example/example.component';\nimport SimpleFormComponent from '../components/simple-form/simple-form.component';\nimport { simpleFormCode } from '../components/simple-form/simple-form-code';\nimport ValidationsFormComponent from '../components/validations-form/validations-form.component';\nimport { validationsFormCode } from '../components/validations-form/validations-form-code';\nimport FileFormComponent from '../components/file-form/file-form.component';\nimport { fileFormCode } from '../components/file-form/file-form-code';\nimport DateFormComponent from '../components/date-form/date-form.component';\nimport { dateFormCode } from '../components/date-form/date-form-code';\nimport SelectCheckboxFormComponent from '../components/select-checkbox-form/select-checkbox-form.component';\nimport { selectCheckboxCode } from '../components/select-checkbox-form/select-checkbox-code';\nimport ListFormComponent from '../components/list-form/list-form.component';\nimport { listFormCode } from '../components/list-form/list-form-code';\n\n\ninterface AppConfig {\n    EXAMPLES: ExampleComponentProps[];\n}\n\nexport const APP_CONSTANTS: AppConfig = {\n    EXAMPLES: [\n        {\n            title: 'SIMPLE FORM EXAMPLE',\n            subtitle: 'An example of a form using all field types except list type, there is a section for this special type. It also shows how to listen for changes in specific fields.',\n            component: <SimpleFormComponent/>,\n            code: simpleFormCode\n        }, {\n            title: 'CUSTOM VALIDATIONS EXAMPLE',\n            subtitle: 'An example of a form using custom validations for specific fields and for on submit including async calls.',\n            component: <ValidationsFormComponent/>,\n            code: validationsFormCode\n        }, {\n            title: 'FILE FORM EXAMPLE',\n            subtitle: 'An example of a form with single and multiple files input and spefying the file type.',\n            component: <FileFormComponent/>,\n            code: fileFormCode\n        }, {\n            title: 'DATE FORM EXAMPLE',\n            subtitle: 'An example of a form with dates in Spanish, with ranges and calendar adapted to mobile devices.',\n            component: <DateFormComponent/>,\n            code: dateFormCode\n        }, {\n            title: 'SELECT AND CHECKBOX FORM EXAMPLE',\n            subtitle: 'An example of a form with single and multiple selection checkbox, checkbox-list and select showing how to pass already selected values.',\n            component: <SelectCheckboxFormComponent/>,\n            code: selectCheckboxCode\n        }, {\n            title: 'LIST FORM EXAMPLE',\n            subtitle: 'An example of a form with a list field, it allows to add as many custom objects as you want. It is kind of a form inside a form. It is recursive, you can add a list field inside a list field.',\n            component: <ListFormComponent/>,\n            code: listFormCode\n        }\n    ]\n};\n","export const simpleFormCode: string = `import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\n\nconst SimpleFormComponent: FunctionComponent = (): ReactElement => {\n  const fields: Field[] = [\n    { value: '', className: 'col-sm-12 col-md-3', label: 'Name', name: 'name', type: 'string', required: true, onChange: (name: string) => console.log('Name changed: ' + name), onBlur: (name: string) => console.log('Name blur: ' + name) },\n    { value: '', className: 'col-sm-12 col-md-3', label: 'Email', name: 'email', type: 'email', required: true },\n    { value: '', className: 'col-sm-12 col-md-3', label: 'Age', name: 'age', required: true, inputType: 'number', type: 'number' },\n    { value: '', className: 'col-sm-12 col-md-3', label: 'Password', name: 'pwd', required: true, inputType: 'password' },\n    { value: '', className: 'col-sm-12 col-md-8', label: 'Description', name: 'description', type: 'textarea' },\n    { value: '', className: 'col-sm-12 col-md-4', label: 'Curriculum Vitae', name: 'cv', type: 'file', required: true },\n    { value: '', className: 'col-sm-12', label: 'Business', name: 'business', type: 'checkbox', required: true },\n    { value: '', className: 'col-sm-12 col-md-4', label: 'Birthday', name: 'birthday', type: 'date', required: true },\n    { value: '', className: 'col-sm-12 col-md-4', label: 'Where do you live?', name: 'continent', type: 'select', options: [{label: 'Africa', value: 'af'}, {label: 'America', value: 'am'}, {label: 'Asia', value: 'as'}, {label: 'Europe', value: 'eu'}, {label: 'Oceania', value: 'oc'}] },\n    { value: '', className: 'col-sm-12 col-md-4', label: 'Where would you like to live?', name: 'desiredContinent', type: 'select', placeholder: 'Select the ones you like', options: [{label: 'Africa', value: 'af'}, {label: 'America', value: 'am'}, {label: 'Asia', value: 'as'}, {label: 'Europe', value: 'eu'}, {label: 'Oceania', value: 'oc'}], multipleSelected: true },\n    { value: '', className: 'col-sm-12 col-md-6', label: 'Which is your favourite color?', name: 'colors', type: 'checkbox-list', options: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}, {label: 'Blue', value: 'blue'}, {label: 'Yellow', value: 'yellow'}] },\n    { value: '', className: 'col-sm-12 col-md-6', label: 'What programming languages do you know?', name: 'languages', type: 'checkbox-list', options: [{label: 'JavaScript', value: 'js'}, {label: 'TypeScript', value: 'ts'}, {label: 'JAVA', value: 'java'}, {label: 'Python', value: 'py'}], multipleSelected: true },\n  ];\n\n  const onSubmit = (form: Record<string, any>): void => console.log(form);\n\n  return <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} />;\n};\n\nexport default SimpleFormComponent;\n`;\n","export const validationsFormCode = `import React, { FunctionComponent, ReactElement, useState } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\nimport './validations-form.component.scss';\nimport { SpinnerComponent } from 'react-element-spinner';\n\nconst nameValidation = (name: string): string => name.length > 3 ? '' : 'short_name';\n\nconst customErrors = {\n    short_name: 'Name is too short.',\n    server_error: 'Something went wrong, please try later.'\n}\n\nconst ValidationsFormComponent: FunctionComponent = (): ReactElement => {\n    const [ loading, setLoading ] = useState(false);\n\n    const asyncValidation = (email: string): Promise<string> => {\n        setLoading(true);\n\n        return new Promise(resolve => {\n            const timeout = setTimeout(() => {\n                clearTimeout(timeout);\n                resolve(email === 'email@gmail.com' ? 'This mail is already registered' : '');\n                setLoading(false);\n            }, 2000);\n        });\n    };\n\n    const fields: Field[] = [\n        { value: '', className: 'col-sm-12 col-md-3', label: 'Name', name: 'name', type: 'string', placeholder: 'Name', customValidator: nameValidation },\n        { value: 'default@gmail.com', className: 'col-sm-12 col-md-3', label: 'Email', name: 'email', type: 'email', customValidator: asyncValidation }\n    ];\n\n    const onSubmit = (form: Record<string, any>): Record<string, any> | void => {\n        return form.name === 'John' ? { generalError: 'server_error' } : console.log(form);\n    };\n\n    return <>\n        <SpinnerComponent position=\"global\" loading={loading} />\n        <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} errors={customErrors} submitButtonText=\"Submit\" />\n    </>;\n};\n\nexport default ValidationsFormComponent;\n`;","export const fileFormCode = `import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\n\nconst FileFormComponent: FunctionComponent = (): ReactElement => {\n  const fields: Field[] = [\n    { value: 'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf', className: 'col-sm-12 col-md-6', label: 'Single PDF File', name: 'pdf', type: 'file', fileType: 'application/pdf' },\n    { value: [], className: 'col-sm-12 col-md-6', label: 'Multiple image files', name: 'images', type: 'file', fileType: 'image/*', multipleFiles: true, placeholder: 'Only images allowed', required: true }\n  ];\n\n  const onSubmit = (form: Record<string, any>): void => console.log(form);\n\n  return <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} />;\n};\n\nexport default FileFormComponent;\n`;\n","export const dateFormCode = `import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\nimport es from 'date-fns/locale/es';\n\nconst DateFormComponent: FunctionComponent = (): ReactElement => {\n    const minDate = new Date();\n    const maxDate = new Date();\n    maxDate.setMonth(minDate.getMonth() + 1);\n\n    const fields: Field[] = [\n        { type: 'custom', content: <div className=\"col-sm-12\"><h4>Custom content as title for the form</h4></div> },\n        { value: '', className: 'col-sm-12 col-md-4', label: 'Date with max and min', name: 'maxMinDate', type: 'date', minDate, maxDate },\n        { value: '', className: 'col-sm-12 col-md-4', label: 'Date adapted to mobile', name: 'mobileDate', type: 'date', mobileCalendar: true },\n    ];\n\n    const onSubmit = (form: Record<string, any>): void => console.log(form);\n\n    return <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} calendarLocale={es} />;\n};\n\nexport default DateFormComponent;\n`;","export const selectCheckboxCode = `import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\n\nconst SelectCheckboxFormComponent: FunctionComponent = (): ReactElement => {\n  const fields: Field[] = [\n    { value: true, className: 'col-sm-12', label: 'Business', name: 'business', type: 'checkbox', required: true },\n    { value: 'eu', className: 'col-sm-12 col-md-4', label: 'Where do you live?', name: 'continent', type: 'select', options: [{label: 'Africa', value: 'af'}, {label: 'America', value: 'am'}, {label: 'Asia', value: 'as'}, {label: 'Europe', value: 'eu'}, {label: 'Oceania', value: 'oc'}] },\n    { value: ['am', 'as'], className: 'col-sm-12 col-md-4', label: 'Where would you like to live?', name: 'desiredContinent', type: 'select', placeholder: 'Select the ones you like', options: [{label: 'Africa', value: 'af'}, {label: 'America', value: 'am'}, {label: 'Asia', value: 'as'}, {label: 'Europe', value: 'eu'}, {label: 'Oceania', value: 'oc'}], multipleSelected: true },\n    { value: 'red', className: 'col-sm-12 col-md-6', label: 'Which is your favourite color?', name: 'colors', type: 'checkbox-list', options: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}, {label: 'Blue', value: 'blue'}, {label: 'Yellow', value: 'yellow'}] },\n    { value: ['js', 'ts'], className: 'col-sm-12 col-md-6', label: 'What programming languages do you know?', name: 'languages', type: 'checkbox-list', options: [{label: 'JavaScript', value: 'js'}, {label: 'TypeScript', value: 'ts'}, {label: 'JAVA', value: 'java'}, {label: 'Python', value: 'py'}], multipleSelected: true }\n  ];\n\n  const onSubmit = (form: Record<string, any>): void => console.log(form);\n\n  return <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} />;\n};\n\nexport default SelectCheckboxFormComponent;\n`;","export const listFormCode = `import React, { FunctionComponent, ReactElement } from 'react';\nimport { FormComponent, Field } from 'react-forms-element';\n\nconst submitList = (values: any): Record<string, string> | void => {\n    return values.city.length > 3 ? undefined : { city: 'The city does not exist!' };\n};\n\nconst formatDate = (date: Date): string => date.toDateString();\n\nconst ListFormComponent: FunctionComponent = (): ReactElement => {\n  const fields: Field[] = [\n    { value: '', label: 'Name', name: 'name', type: 'string', className: 'col-sm-12 col-md-3' }, \n    { value: '', className: 'row no-margin', title: 'Which cities have you visited?', name: 'cities', type: 'list', required: true, onSubmit: submitList, fields: [ \n        { value: '', className: 'col-sm-12', label: 'City', name: 'city', type: 'string', required: true, showInList: true },\n        { value: '', className: 'col-sm-12', label: 'Country', name: 'country', type: 'string', required: true },\n        { value: '', className: 'col-sm-12', label: 'Did you like it?', listLabel: 'Liked', name: 'liked', type: 'checkbox', showInList: true },\n        { value: '', className: 'col-sm-12', label: 'When did you visit it?', listLabel: 'When', name: 'when', type: 'date', required: true, maxDate: new Date(), showInList: true },\n        { value: '', className: 'col-sm-12', label: 'When do you plan to visit it again? (other date format)', listLabel: 'Next visit', name: 'nextVisit', type: 'date', formatDate, minDate: new Date(), showInList: true },\n        { value: '', className: 'col-sm-12', label: 'Photos', name: 'photos', type: 'file', multipleFiles: true, showInList: true },\n        { value: '', className: 'col-sm-12', label: 'Score', showInList: true, required: true, placeholder: '- Select -', name: 'score', type: 'select', options: [{label: 'Bad', value: 'bad'}, {label: 'Good', value: 'good'}, {label: 'Excellent', value: 'excellent'}] },\n        { value: '', className: 'col-sm-12', label: 'Which kind of food did you eat?', listLabel: 'Food', multipleSelected: true, required: false, name: 'foods', showInList: true, type: 'checkbox-list', options: [{label: 'Pizza', value: 'pizza'}, {label: 'Hamburguer', value: 'hamburguer'}, {label: 'Sushi', value: 'sushi'}] },\n    ]}\n  ];\n\n  const onSubmit = (form: any): any => console.log(form);\n\n  return <FormComponent className=\"row\" fields={fields} onSubmit={onSubmit} />;\n};\n\nexport default ListFormComponent;\n`;\n","import React, { FunctionComponent, ReactElement } from 'react';\nimport './App.scss';\nimport HeaderComponent from './components/header/header.component';\nimport ExampleComponent, { ExampleComponentProps } from './components/example/example.component';\nimport { APP_CONSTANTS } from './config/app.config';\n\nconst App: FunctionComponent = (): ReactElement => {\n  return <div className=\"App\">\n      <HeaderComponent/>\n      <div className=\"title-container text-centered\">\n          <img src={process.env.PUBLIC_URL + '/logo.png'} alt=\"logo\"/>\n          <h1>React Forms Element</h1>\n          <p>Flexible and customizable npm component to easily create forms in React.</p>\n      </div>\n      <div className=\"margin-top\">\n        { APP_CONSTANTS.EXAMPLES.map((props: ExampleComponentProps, index: number) => <ExampleComponent key={index} {...props}/>) }\n      </div>\n  </div>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}